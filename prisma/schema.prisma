// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["app"]
}

model User {
  id         String   @id @default(cuid())
  firebaseId String   @unique
  email      String   @unique
  name       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  links          Link[]
  folders        Folder[]
  categories     Category[]
  folderAccesses FolderAccess[]

  @@schema("app")
}

model Link {
  id          String   @id @default(cuid())
  title       String
  url         String
  description String?
  customSlug  String?  @unique
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  folder   Folder? @relation(fields: [folderId], references: [id])
  folderId String?

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([userId], name: "link_userId_idx")
  @@index([folderId], name: "link_folderId_idx")
  @@index([categoryId], name: "link_categoryId_idx")
  @@index([createdAt], name: "link_createdAt_idx")
  @@schema("app")
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  isSecret  Boolean  @default(false)
  password  String? // hash da senha se for pasta secreta
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  parent     Folder?  @relation("Subfolders", fields: [parentId], references: [id])
  parentId   String?
  subfolders Folder[] @relation("Subfolders")

  links      Link[]
  sharedWith FolderAccess[]

  @@schema("app")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3b82f6")
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  links Link[]

  @@schema("app")
}

model FolderAccess {
  id       String @id @default(cuid())
  folderId String
  userId   String
  status   String @default("PENDING")

  // Relações com os outros modelos
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // Garante que um usuário só pode ter acesso a uma pasta uma única vez
  @@unique([folderId, userId])
  @@schema("app")
}
